version: '3.4'

services:
  chat:
    image: downloader-gochat
    network_mode: host
    depends_on:
      - rabbitmq
    build:
      context: .
      dockerfile: ./Dockerfile
      network: host
    env_file: ./.env
    environment:
      PORT: 3002
      MAIN_SERVER_ADDRESS: api.movieTracker.mom
      CORS_ALLOWED_ORIGINS: https://www.movietracker.mom --- https://movietracker.mom --- http://movietracker.mom --- https://admin.movietracker.mom --- http://admin.movietracker.mom --- https://chat.movietracker.mom
      LOG_PANIC_TRACE: 'true'
      DOMAIN: movietracker.mom
      MALLOC_ARENA_MAX: 2
    #    ports:
    #      - "3000:3000"
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: 150M
        reservations:
          memory: 20M
    restart: always

  rabbitmq:
    image: rabbitmq
    network_mode: host
    container_name: my-rabbitmq
    build:
      context: .
      dockerfile: ./docker/rabbitmq/Dockerfile
      network: host
    env_file: ./.env
    environment:
      - PORT=5672
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_ERLANG_COOKIE=unique-erlang-cookie
    #    ports:
    #      - "5672:5672"
    #      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq/
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 250M
        reservations:
          memory: 150M
    restart: always

  postgresDb:
    image: postgres:16.0-alpine3.18
    env_file: ./.env
    network_mode: service:chat
    container_name: downloader_postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=downloader
    #    ports:
    #      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: [ "postgres", "-c", "log_min_messages=log" ]
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 300M
        reservations:
          memory: 50M
    #    healthcheck:
    #      test: ["CMD-SHELL", "pg_isready -U postgres"]
    #      interval: 10s
    #      timeout: 5s
    #      retries: 10
    restart: always

volumes:
  redis:
    driver: local
  rabbitmq:
    driver: local
  pgdata:
    driver: local