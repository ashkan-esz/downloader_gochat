// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "get the status of server.",
                "tags": [
                    "System"
                ],
                "summary": "Show the status of server.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/user/UpdateUserFavoriteGenres/:genres": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "maximum number of genres is 6, (error code 409).",
                "tags": [
                    "User"
                ],
                "summary": "Update Favorite Genres",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Array of String joined by '-', Example: action-sci_fi-drama",
                        "name": "genres",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/activeSessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return users current session and other active sections.",
                "tags": [
                    "User-Auth"
                ],
                "summary": "Active Sessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveSessionRes"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/deleteAccount": {
            "delete": {
                "description": "remove user account. email the user with a link, if user open it, account gets removed.\nthe link expires in 10 minutes.\nmaybe email goes to spam folder.\nlimited to 2 call per minute",
                "tags": [
                    "User"
                ],
                "summary": "Delete Account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/deleteAccount/:userId/:token": {
            "get": {
                "description": "remove account link created on server and send to user by email, if user click this link the account will start to remove.\nlimited to 2 call per minute",
                "tags": [
                    "User"
                ],
                "summary": "Delete Account (Internal Usage)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "userId",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "delete account verify token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/editUserProfile": {
            "post": {
                "description": "Edit profile data.",
                "tags": [
                    "User"
                ],
                "summary": "Edit Profile",
                "parameters": [
                    {
                        "description": "update fields",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EditProfileReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/follow/:followId": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add followId user to your following list",
                "tags": [
                    "User-Follow"
                ],
                "summary": "Follow User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id on the user want to follow",
                        "name": "followId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/followers/:userId/:skip/:limit": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "get user followers",
                "tags": [
                    "User-Follow"
                ],
                "summary": "Followers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "skip",
                        "name": "skip",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.FollowUserDataModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/followings/:userId/:skip/:limit": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "get user followings",
                "tags": [
                    "User-Follow"
                ],
                "summary": "Followings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "skip",
                        "name": "skip",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.FollowUserDataModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/forceLogout/:deviceId": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout selected device",
                "tags": [
                    "User-Auth"
                ],
                "summary": "Force Logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "unique id of the device",
                        "name": "deviceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/forceLogoutAll": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "force logout all session except current session",
                "tags": [
                    "User-Auth"
                ],
                "summary": "Force Logout All",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/getToken": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get new Tokens, also return ` + "`" + `refreshToken` + "`" + `",
                "tags": [
                    "User-Auth"
                ],
                "summary": "Get Token",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "return refreshToken in response body instead of saving in cookie",
                        "name": "noCookie",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "also return profile images, slower response",
                        "name": "profileImages",
                        "in": "query"
                    },
                    {
                        "description": "Device Info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DeviceInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserViewModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/login": {
            "post": {
                "description": "Login with provided credentials",
                "tags": [
                    "User-Auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "return refreshToken in response body instead of saving in cookie",
                        "name": "noCookie",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginViewModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserViewModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/logout": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout user, return accessToken as empty string and also reset/remove refreshToken cookie if use in browser\nin other environments reset refreshToken from client after successful logout.",
                "tags": [
                    "User-Auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/media/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "upload and share media files in chats",
                "tags": [
                    "User-Chat"
                ],
                "summary": "Upload File",
                "parameters": [
                    {
                        "description": "upload file data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UploadMediaReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MediaFile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/notifications/:skip/:limit": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "get user followers/followings events",
                "tags": [
                    "User-Notifications"
                ],
                "summary": "Follow events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "skip",
                        "name": "skip",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "entityTypeId, ignore filter when value is 0",
                        "name": "entityTypeId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "status, ignore filter when value is 0, 1 means saved, 2 means seen",
                        "name": "status",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "autoUpdateStatus",
                        "name": "autoUpdateStatus",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NotificationDataModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/notifications/batchUpdateStatus/:id/:entityTypeId/:status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "update the status of notifications",
                "tags": [
                    "User-Notifications"
                ],
                "summary": "Notification Status update",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "notificationId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "type of notification, ignore filter when value is 0",
                        "name": "entityTypeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "new value of status, 1 means saved, 2 means seen",
                        "name": "status",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return users profile data. if dont provide userId, return current user profile",
                "tags": [
                    "User"
                ],
                "summary": "Profile Data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "userId",
                        "name": "userId",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "loadSettings",
                        "name": "loadSettings",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "loadFollowersCount",
                        "name": "loadFollowersCount",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "loadDevice",
                        "name": "loadDevice",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "loadProfileImages",
                        "name": "loadProfileImages",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "loadComputedFavoriteGenres",
                        "name": "loadComputedFavoriteGenres",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserProfileRes"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/removeProfileImage/:fileName": {
            "delete": {
                "description": "Returns new profileImages array",
                "tags": [
                    "User"
                ],
                "summary": "Remove Profile Image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "file name of profile image",
                        "name": "fileName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ProfileImageDataModel"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/sendVerifyEmail": {
            "get": {
                "description": "send an email with an activation link. the link will expire after 6 hour.\nmaybe email goes to spam folder.\nlimited to 2 call per minute",
                "tags": [
                    "User"
                ],
                "summary": "Send Verify Email",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/setNotifToken": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "send device token as Notification token",
                "tags": [
                    "User-Notifications"
                ],
                "summary": "Notification Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "notifToken",
                        "name": "notifToken",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/signup": {
            "post": {
                "description": "Register a new user with the provided credentials\nDevice detection can be improved on client side with adding 'deviceInfo.fingerprint'",
                "tags": [
                    "User-Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "return refreshToken in response body instead of saving in cookie",
                        "name": "noCookie",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterViewModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserViewModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/unfollow/:followId": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove followId user from users following list",
                "tags": [
                    "User-Follow"
                ],
                "summary": "UnFollow User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id on the user want to unfollow",
                        "name": "followId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/updatePassword": {
            "put": {
                "description": "Update User Password.",
                "tags": [
                    "User"
                ],
                "summary": "Update Password",
                "parameters": [
                    {
                        "description": "old/new passwords",
                        "name": "passwords",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdatePasswordReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/updateUserSettings/:settingName": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change user settings based on settingName.",
                "tags": [
                    "User-Setting"
                ],
                "summary": "Change user settings based on settingName.",
                "parameters": [
                    {
                        "enum": [
                            "all",
                            "downloadLinks",
                            "notification",
                            "movie"
                        ],
                        "type": "string",
                        "description": "name of setting",
                        "name": "settingName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "new setting values",
                        "name": "downloadLinksSettings",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/model.DownloadLinksSettings"
                        }
                    },
                    {
                        "description": "new setting values",
                        "name": "notificationSettings",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/model.NotificationSettings"
                        }
                    },
                    {
                        "description": "new setting values",
                        "name": "movieSettings",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/model.MovieSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/uploadProfileImage": {
            "post": {
                "description": "send image as formData with key 'profileImage' and don't forget to set contentType. returns new profileImages array .",
                "tags": [
                    "User"
                ],
                "summary": "Upload Profile Image",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ProfileImageDataModel"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/userSettings/:settingName": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns user settings for movies, downloadLinks and notifications.",
                "tags": [
                    "User-Setting"
                ],
                "summary": "Get User Settings",
                "parameters": [
                    {
                        "enum": [
                            "all",
                            "downloadLinks",
                            "notification",
                            "movie"
                        ],
                        "type": "string",
                        "description": "name of setting",
                        "name": "settingName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserSettingsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/user/verifyEmail/:userId/:token": {
            "get": {
                "description": "verify given email token. create activation link on server side.\nlimited to 2 call per minute",
                "tags": [
                    "User"
                ],
                "summary": "Verify Email (Internal Usage)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "userId",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "email verify token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseOKModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/ws/addClient/:deviceId": {
            "get": {
                "description": "start websocket connection",
                "tags": [
                    "User-Websocket"
                ],
                "summary": "Connect websocket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "unique id of the device",
                        "name": "deviceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "types of bodies can be handled in server",
                        "name": "messageBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ClientMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ServerResultMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/ws/singleChat/list": {
            "get": {
                "description": "get list of conversations",
                "tags": [
                    "User-Websocket"
                ],
                "summary": "Chats List",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "chatsSkip",
                        "name": "chatsSkip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "chatsLimit",
                        "name": "chatsLimit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "messagePerChatSkip",
                        "name": "messagePerChatSkip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "messagePerChatLimit",
                        "name": "messagePerChatLimit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "messageState",
                        "name": "messageState",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "includeProfileImages",
                        "name": "includeProfileImages",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ChatsCompressedDataModel"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        },
        "/v1/ws/singleChat/messages": {
            "get": {
                "description": "get messages of users chat",
                "tags": [
                    "User-Websocket"
                ],
                "summary": "Chat Messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "receiverId",
                        "name": "receiverId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "skip",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "messageState",
                        "name": "messageState",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "reverseOrder",
                        "name": "reverseOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.MessageDataModel"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ResponseErrorModel"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.ActionError": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/definitions/model.ActionType"
                },
                "actionData": {},
                "code": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                }
            }
        },
        "model.ActionType": {
            "type": "string",
            "enum": [
                "message-read",
                "send-new-message",
                "receive-new-message",
                "new-message-send-result",
                "receive-message-state",
                "action-error",
                "new-follow-notification",
                "new-message-notification",
                "update-profile-images",
                "update-profile",
                "single-chats-list",
                "single-chat-messages",
                "notification-settings",
                "user-status",
                "user-status-isTyping"
            ],
            "x-enum-varnames": [
                "MessageReadAction",
                "SendNewMessageAction",
                "ReceiveNewMessageAction",
                "NewMessageSendResultAction",
                "ReceiveMessageStateAction",
                "ErrorAction",
                "FollowNotifAction",
                "NewMessageNotifAction",
                "UpdateProfileImagesAction",
                "UpdateProfileAction",
                "SingleChatsListAction",
                "SingleChatMessagesAction",
                "NotificationSettingsAction",
                "UserStatusAction",
                "UserIsTypingAction"
            ]
        },
        "model.ActiveSessionDataModel": {
            "type": "object",
            "properties": {
                "appName": {
                    "type": "string"
                },
                "appVersion": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "string"
                },
                "deviceModel": {
                    "type": "string"
                },
                "deviceOs": {
                    "type": "string"
                },
                "ipLocation": {
                    "description": "NotifToken   string    ` + "`" + `gorm:\"column:notifToken;\" json:\"-\"` + "`" + `",
                    "type": "string"
                },
                "lastUseDate": {
                    "type": "string"
                },
                "loginDate": {
                    "type": "string"
                }
            }
        },
        "model.ActiveSessionRes": {
            "type": "object",
            "properties": {
                "activeSessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ActiveSessionDataModel"
                    }
                },
                "thisDevice": {
                    "$ref": "#/definitions/model.ActiveSessionDataModel"
                }
            }
        },
        "model.ChatsCompressedDataModel": {
            "type": "object",
            "properties": {
                "isOnline": {
                    "type": "boolean"
                },
                "lastSeenDate": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MessageDataModel"
                    }
                },
                "profileImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ProfileImageDataModel"
                    }
                },
                "publicName": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "unreadMessagesCount": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.ClientMessage": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/definitions/model.ActionType"
                },
                "chatMessagesReq": {
                    "description": "action is SingleChatMessagesAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.GetSingleMessagesReq"
                        }
                    ]
                },
                "chatsListReq": {
                    "description": "action is SingleChatsListAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.GetSingleChatListReq"
                        }
                    ]
                },
                "messageRead": {
                    "description": "action is MessageReadAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.MessageRead"
                        }
                    ]
                },
                "newMessage": {
                    "description": "action is SendNewMessageAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.NewMessage"
                        }
                    ]
                },
                "userStatusReq": {
                    "description": "action is UserStatusAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.UserStatusReq"
                        }
                    ]
                }
            }
        },
        "model.ComputedFavoriteGenres": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "string"
                },
                "genre": {
                    "type": "string"
                },
                "percent": {
                    "type": "number"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "model.DeviceInfo": {
            "type": "object",
            "required": [
                "appName",
                "appVersion",
                "deviceModel",
                "os"
            ],
            "properties": {
                "appName": {
                    "type": "string"
                },
                "appVersion": {
                    "description": "format: ^\\d\\d?\\.\\d\\d?\\.\\d\\d?$",
                    "type": "string"
                },
                "deviceModel": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "notifToken": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                }
            }
        },
        "model.DownloadLinksSettings": {
            "type": "object",
            "properties": {
                "includeCensored": {
                    "type": "boolean",
                    "default": true
                },
                "includeDubbed": {
                    "type": "boolean",
                    "default": true
                },
                "includeHardSub": {
                    "type": "boolean",
                    "default": true
                },
                "preferredQualities": {
                    "description": "enum: 480p,720p,1080p,2160p",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.EditProfileReq": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "mbtiType": {
                    "$ref": "#/definitions/model.MbtiType"
                },
                "publicName": {
                    "type": "string"
                },
                "username": {
                    "description": "format: (?i)^[a-z|\\d_-]+$",
                    "type": "string"
                }
            }
        },
        "model.FollowListProfileImageDataModel": {
            "type": "object",
            "properties": {
                "blurHash": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "thumbnail": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "model.FollowUserDataModel": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "profileImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.FollowListProfileImageDataModel"
                    }
                },
                "publicName": {
                    "type": "string"
                },
                "rawUsername": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.GetSingleChatListReq": {
            "type": "object",
            "properties": {
                "chatsLimit": {
                    "type": "integer",
                    "minimum": 1
                },
                "chatsSkip": {
                    "type": "integer",
                    "minimum": 0
                },
                "includeProfileImages": {
                    "type": "boolean",
                    "default": false
                },
                "messagePerChatLimit": {
                    "type": "integer",
                    "maximum": 6,
                    "minimum": 1
                },
                "messagePerChatSkip": {
                    "type": "integer",
                    "minimum": 0
                },
                "messageState": {
                    "description": "0: pending, 1: saved, 2: receiver read",
                    "type": "integer",
                    "default": 0,
                    "maximum": 2,
                    "minimum": 0
                }
            }
        },
        "model.GetSingleMessagesReq": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer",
                    "minimum": 1
                },
                "messageState": {
                    "description": "0: pending, 1: saved, 2: receiver read || on 0 value, this filter won't apply",
                    "type": "integer",
                    "default": 0,
                    "maximum": 2,
                    "minimum": 0
                },
                "receiverId": {
                    "type": "integer",
                    "minimum": 1
                },
                "reverseOrder": {
                    "type": "boolean",
                    "default": false
                },
                "skip": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "model.LoginViewModel": {
            "type": "object",
            "properties": {
                "deviceInfo": {
                    "$ref": "#/definitions/model.DeviceInfo"
                },
                "password": {
                    "description": "contain one number, one uppercase letter, cannot have space, cannot be equal with username",
                    "type": "string"
                },
                "username_email": {
                    "type": "string"
                }
            }
        },
        "model.MbtiType": {
            "type": "string",
            "enum": [
                "ISTJ",
                "ISFJ",
                "INFJ",
                "INTJ",
                "ISTP",
                "ISFP",
                "INFP",
                "INTP",
                "ESTP",
                "ESFP",
                "ENFP",
                "ENTP",
                "ESTJ",
                "ESFJ",
                "ENFJ",
                "ENTJ"
            ],
            "x-enum-varnames": [
                "ISTJ",
                "ISFJ",
                "INFJ",
                "INTJ",
                "ISTP",
                "ISFP",
                "INFP",
                "INTP",
                "ESTP",
                "ESFP",
                "ENFP",
                "ENTP",
                "ESTJ",
                "ESFJ",
                "ENFJ",
                "ENTJ"
            ]
        },
        "model.MediaFile": {
            "type": "object",
            "properties": {
                "blurHash": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "messageId": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "thumbnail": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "model.MessageDataModel": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "creatorId": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "medias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MediaFile"
                    }
                },
                "receiverId": {
                    "type": "integer"
                },
                "roomId": {
                    "type": "integer"
                },
                "state": {
                    "type": "integer"
                }
            }
        },
        "model.MessageRead": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                },
                "roomId": {
                    "description": "value -1 means its user-to-user message",
                    "type": "integer",
                    "minimum": -1
                },
                "state": {
                    "description": "0: pending, 1: saved, 2: receiver read",
                    "type": "integer",
                    "maximum": 2,
                    "minimum": 0
                },
                "userId": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "model.MovieSettings": {
            "type": "object",
            "properties": {
                "includeAnime": {
                    "type": "boolean",
                    "default": true
                },
                "includeHentai": {
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "model.NewMessage": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "receiverId": {
                    "type": "integer",
                    "minimum": 1
                },
                "roomId": {
                    "description": "value -1 means its user-to-user message",
                    "type": "integer",
                    "minimum": -1
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "model.NewMessageSendResult": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "receiverId": {
                    "type": "integer"
                },
                "roomId": {
                    "type": "integer"
                },
                "state": {
                    "type": "integer"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "model.NotificationDataModel": {
            "type": "object",
            "properties": {
                "creatorId": {
                    "type": "integer"
                },
                "creatorImage": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "entityId": {
                    "type": "integer"
                },
                "entityTypeId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "receiverId": {
                    "type": "integer"
                },
                "status": {
                    "description": "1: saved, 2: seen",
                    "type": "integer"
                }
            }
        },
        "model.NotificationSettings": {
            "type": "object",
            "properties": {
                "finishedListSpinOffSequel": {
                    "type": "boolean",
                    "default": true
                },
                "followMovie": {
                    "type": "boolean",
                    "default": true
                },
                "followMovieBetterQuality": {
                    "type": "boolean",
                    "default": true
                },
                "followMovieSubtitle": {
                    "type": "boolean",
                    "default": true
                },
                "futureList": {
                    "type": "boolean",
                    "default": true
                },
                "futureListSerialSeasonEnd": {
                    "type": "boolean",
                    "default": true
                },
                "futureListSubtitle": {
                    "type": "boolean",
                    "default": true
                },
                "newFollower": {
                    "type": "boolean",
                    "default": true
                },
                "newMessage": {
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "model.ProfileImage": {
            "type": "object",
            "properties": {
                "addDate": {
                    "type": "string"
                },
                "blurHash": {
                    "type": "string"
                },
                "originalSize": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "thumbnail": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "model.ProfileImageDataModel": {
            "type": "object",
            "properties": {
                "addDate": {
                    "type": "string"
                },
                "blurHash": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "thumbnail": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "model.ReceiveNewMessage": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "creatorImage": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "medias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MediaFile"
                    }
                },
                "receiverId": {
                    "type": "integer"
                },
                "roomId": {
                    "type": "integer"
                },
                "state": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "model.RegisterViewModel": {
            "type": "object",
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "deviceInfo": {
                    "$ref": "#/definitions/model.DeviceInfo"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "description": "contain one number, one uppercase letter, cannot have space, cannot be equal with username",
                    "type": "string"
                },
                "username": {
                    "description": "min:6, max: 50",
                    "type": "string",
                    "format": "(?i)^[a-z|\\d_-]+$"
                }
            }
        },
        "model.ServerResultMessage": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/definitions/model.ActionType"
                },
                "actionError": {
                    "description": "action is ErrorAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ActionError"
                        }
                    ]
                },
                "chatMessages": {
                    "description": "action is SingleChatMessagesAction",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MessageDataModel"
                    }
                },
                "chats": {
                    "description": "action is SingleChatsListAction",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ChatsCompressedDataModel"
                    }
                },
                "editProfile": {
                    "description": "action is UpdateProfileAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.EditProfileReq"
                        }
                    ]
                },
                "messageRead": {
                    "description": "action is ReceiveMessageStateAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.MessageRead"
                        }
                    ]
                },
                "newMessageSendResult": {
                    "description": "action is NewMessageSendResultAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.NewMessageSendResult"
                        }
                    ]
                },
                "notificationSettings": {
                    "description": "action is NotificationSettingsAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.NotificationSettings"
                        }
                    ]
                },
                "profileImages": {
                    "description": "action is UpdateProfileImagesAction",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ProfileImageDataModel"
                    }
                },
                "receiveNewMessage": {
                    "description": "action is ReceiveNewMessageAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ReceiveNewMessage"
                        }
                    ]
                },
                "userStatusRes": {
                    "description": "action is UserStatusAction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.UserStatusRes"
                        }
                    ]
                }
            }
        },
        "model.TokenViewModel": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "accessToken_expire": {
                    "type": "integer"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "model.UpdatePasswordReq": {
            "type": "object",
            "required": [
                "oldPassword"
            ],
            "properties": {
                "newPassword": {
                    "description": "contain one number, one uppercase letter, cannot have space, cannot be equal with oldPassword",
                    "type": "string"
                },
                "oldPassword": {
                    "type": "string"
                }
            }
        },
        "model.UploadMediaReq": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "receiverId": {
                    "type": "integer",
                    "minimum": 1
                },
                "roomId": {
                    "description": "value -1 means its user-to-user message",
                    "type": "integer",
                    "minimum": -1
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "model.UserProfileRes": {
            "type": "object",
            "properties": {
                "MovieSettings": {
                    "$ref": "#/definitions/model.MovieSettings"
                },
                "bio": {
                    "type": "string"
                },
                "computedFavoriteGenres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ComputedFavoriteGenres"
                    }
                },
                "computedStatsLastUpdate": {
                    "type": "integer"
                },
                "defaultProfile": {
                    "type": "string"
                },
                "downloadLinksSettings": {
                    "$ref": "#/definitions/model.DownloadLinksSettings"
                },
                "email": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "favoriteGenres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "followersCount": {
                    "type": "integer"
                },
                "followingsCount": {
                    "type": "integer"
                },
                "lastSeenDate": {
                    "type": "string"
                },
                "mbtiType": {
                    "$ref": "#/definitions/model.MbtiType"
                },
                "notificationSettings": {
                    "$ref": "#/definitions/model.NotificationSettings"
                },
                "profileImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.FollowListProfileImageDataModel"
                    }
                },
                "publicName": {
                    "type": "string"
                },
                "rawUsername": {
                    "type": "string"
                },
                "registrationDate": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/model.UserRole"
                },
                "thisDevice": {
                    "$ref": "#/definitions/model.ActiveSessionDataModel"
                },
                "userId": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.UserRole": {
            "type": "string",
            "enum": [
                "test_user",
                "user",
                "dev",
                "admin"
            ],
            "x-enum-varnames": [
                "TEST_USER",
                "USER",
                "DEV",
                "ADMIN"
            ]
        },
        "model.UserSettingsRes": {
            "type": "object",
            "properties": {
                "downloadLinksSettings": {
                    "$ref": "#/definitions/model.DownloadLinksSettings"
                },
                "movieSettings": {
                    "$ref": "#/definitions/model.MovieSettings"
                },
                "notificationSettings": {
                    "$ref": "#/definitions/model.NotificationSettings"
                }
            }
        },
        "model.UserStatusReq": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/model.UserStatusResultType"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "maximum": 12
                    }
                }
            }
        },
        "model.UserStatusRes": {
            "type": "object",
            "properties": {
                "isTypingUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "onlineUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "$ref": "#/definitions/model.UserStatusResultType"
                }
            }
        },
        "model.UserStatusResultType": {
            "type": "string",
            "enum": [
                "onlineUsers",
                "isTyping",
                "stopTyping"
            ],
            "x-enum-varnames": [
                "UserStatusOnlineUsers",
                "UserStatusIsTyping",
                "UserStatusStopTyping"
            ]
        },
        "model.UserViewModel": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "profileImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ProfileImage"
                    }
                },
                "token": {
                    "$ref": "#/definitions/model.TokenViewModel"
                },
                "userId": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.ResponseErrorModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "errorMessage": {}
            }
        },
        "response.ResponseOKModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "chat.movieTracker.mom",
	BasePath:         "/",
	Schemes:          []string{"https"},
	Title:            "Go Chat Server",
	Description:      "Chat service of the downloader_api project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
