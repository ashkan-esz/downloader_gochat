basePath: /
definitions:
  model.DeviceInfo:
    properties:
      appName:
        type: string
      appVersion:
        type: string
      deviceModel:
        type: string
      fingerprint:
        type: string
      notifToken:
        type: string
      os:
        type: string
    type: object
  model.FollowUserDataModel:
    properties:
      bio:
        type: string
      profileImages:
        items:
          $ref: '#/definitions/model.ProfileImage'
        type: array
      publicName:
        type: string
      rawUsername:
        type: string
      userId:
        type: integer
      username:
        type: string
    type: object
  model.LoginViewModel:
    properties:
      deviceInfo:
        $ref: '#/definitions/model.DeviceInfo'
      password:
        type: string
      username_email:
        type: string
    type: object
  model.NotificationDataModel:
    properties:
      creatorId:
        type: integer
      creatorImage:
        type: string
      date:
        type: string
      entityId:
        type: integer
      entityTypeId:
        type: integer
      id:
        type: integer
      message:
        type: string
      receiverId:
        type: integer
      status:
        type: integer
    type: object
  model.ProfileImage:
    properties:
      addDate:
        type: string
      originalSize:
        type: integer
      size:
        type: integer
      thumbnail:
        type: string
      url:
        type: string
      userId:
        type: integer
    type: object
  model.RegisterViewModel:
    properties:
      confirmPassword:
        type: string
      deviceInfo:
        $ref: '#/definitions/model.DeviceInfo'
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.TokenViewModel:
    properties:
      accessToken:
        type: string
      accessToken_expire:
        type: integer
      refreshToken:
        type: string
    type: object
  model.UserViewModel:
    properties:
      email:
        type: string
      profileImages:
        items:
          $ref: '#/definitions/model.ProfileImage'
        type: array
      token:
        $ref: '#/definitions/model.TokenViewModel'
      userId:
        type: integer
      username:
        type: string
    type: object
  response.ResponseErrorModel:
    properties:
      code:
        type: integer
      errorMessage: {}
    type: object
  response.ResponseOKModel:
    properties:
      code:
        type: integer
      errorMessage:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Swagger Example API
  version: "2.0"
paths:
  /:
    get:
      description: get the status of server.
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - root
  /v1/user/follow/:followId:
    post:
      description: add new user to following list`
      parameters:
      - description: id on the user want to follow
        in: path
        name: followId
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Follow user
      tags:
      - User
  /v1/user/followers/:userId/:skip/:limit:
    get:
      description: get user followers
      parameters:
      - description: id of user
        in: path
        name: userId
        required: true
        type: integer
      - description: skip
        in: path
        name: skip
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FollowUserDataModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Followers
      tags:
      - User
  /v1/user/followings/:userId/:skip/:limit:
    get:
      description: get user followings
      parameters:
      - description: id of user
        in: path
        name: userId
        required: true
        type: integer
      - description: skip
        in: path
        name: skip
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FollowUserDataModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Followings
      tags:
      - User
  /v1/user/getToken:
    put:
      description: Get new Tokens, also return `refreshToken`
      parameters:
      - description: return refreshToken in response body instead of saving in cookie
        in: query
        name: noCookie
        required: true
        type: boolean
      - description: also return profile images, slower response
        in: query
        name: profileImages
        required: true
        type: boolean
      - description: Device Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.DeviceInfo'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Get Token
      tags:
      - User
  /v1/user/login:
    post:
      description: Login with provided credentials
      parameters:
      - description: return refreshToken in response body instead of saving in cookie
        in: query
        name: noCookie
        required: true
        type: boolean
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.LoginViewModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Login user
      tags:
      - User
  /v1/user/logout:
    put:
      description: |-
        Logout user, return accessToken as empty string and also reset/remove refreshToken cookie if use in browser
        .in other environments reset refreshToken from client after successful logout.
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - User
  /v1/user/notifications/:skip/:limit:
    get:
      description: get user followers/followings events
      parameters:
      - description: skip
        in: path
        name: skip
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      - description: entityTypeId
        in: query
        name: entityTypeId
        required: true
        type: integer
      - description: status
        in: query
        name: status
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NotificationDataModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Follow events
      tags:
      - User
  /v1/user/notifications/batchUpdateStatus/:id/:entityTypeId/:status:
    put:
      description: update the status of notifications
      parameters:
      - description: notificationId
        in: path
        name: id
        required: true
        type: integer
      - description: type of notification
        in: path
        name: entityTypeId
        required: true
        type: integer
      - description: new value of status
        in: path
        name: status
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Notification Status update
      tags:
      - User
  /v1/user/setNotifToken:
    put:
      description: send device token as Notification token
      parameters:
      - description: notifToken
        in: path
        name: notifToken
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Notification Token
      tags:
      - User
  /v1/user/signup:
    post:
      description: |-
        Register a new user with the provided credentials
        Device detection can be improved on client side with adding 'deviceInfo.fingerprint'
      parameters:
      - description: return refreshToken in response body instead of saving in cookie
        in: query
        name: noCookie
        required: true
        type: boolean
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.RegisterViewModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Register a new user
      tags:
      - User
  /v1/user/unfollow/:followId:
    delete:
      description: remove user from following list`
      parameters:
      - description: id on the user want to follow
        in: path
        name: followId
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: unFollow user
      tags:
      - User
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
