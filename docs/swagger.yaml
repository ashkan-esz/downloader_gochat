basePath: /
definitions:
  model.ActionError:
    properties:
      action:
        $ref: '#/definitions/model.ActionType'
      actionData: {}
      code:
        type: integer
      errorMessage:
        type: string
    type: object
  model.ActionType:
    enum:
    - message-read
    - send-new-message
    - receive-new-message
    - new-message-send-result
    - receive-message-state
    - action-error
    - new-follow-notification
    - new-message-notification
    - movie-notification
    - update-profile-images
    - update-profile
    - single-chats-list
    - single-chat-messages
    - notification-settings
    - user-status
    - user-status-isTyping
    type: string
    x-enum-varnames:
    - MessageReadAction
    - SendNewMessageAction
    - ReceiveNewMessageAction
    - NewMessageSendResultAction
    - ReceiveMessageStateAction
    - ErrorAction
    - FollowNotifAction
    - NewMessageNotifAction
    - MovieNotifAction
    - UpdateProfileImagesAction
    - UpdateProfileAction
    - SingleChatsListAction
    - SingleChatMessagesAction
    - NotificationSettingsAction
    - UserStatusAction
    - UserIsTypingAction
  model.ActiveSessionDataModel:
    properties:
      appName:
        type: string
      appVersion:
        type: string
      deviceId:
        type: string
      deviceModel:
        type: string
      deviceOs:
        type: string
      ipLocation:
        description: NotifToken   string    `gorm:"column:notifToken;" json:"-"`
        type: string
      lastUseDate:
        type: string
      loginDate:
        type: string
    type: object
  model.ActiveSessionRes:
    properties:
      activeSessions:
        items:
          $ref: '#/definitions/model.ActiveSessionDataModel'
        type: array
      thisDevice:
        $ref: '#/definitions/model.ActiveSessionDataModel'
    type: object
  model.ChatsCompressedDataModel:
    properties:
      isOnline:
        type: boolean
      lastSeenDate:
        type: string
      messages:
        items:
          $ref: '#/definitions/model.MessageDataModel'
        type: array
      profileImages:
        items:
          $ref: '#/definitions/model.ProfileImageDataModel'
        type: array
      publicName:
        type: string
      unreadMessagesCount:
        type: integer
      userId:
        type: integer
      username:
        type: string
    type: object
  model.ClientMessage:
    properties:
      action:
        $ref: '#/definitions/model.ActionType'
      chatMessagesReq:
        allOf:
        - $ref: '#/definitions/model.GetSingleMessagesReq'
        description: action is SingleChatMessagesAction
      chatsListReq:
        allOf:
        - $ref: '#/definitions/model.GetSingleChatListReq'
        description: action is SingleChatsListAction
      messageRead:
        allOf:
        - $ref: '#/definitions/model.MessageRead'
        description: action is MessageReadAction
      newMessage:
        allOf:
        - $ref: '#/definitions/model.NewMessage'
        description: action is SendNewMessageAction
      userStatusReq:
        allOf:
        - $ref: '#/definitions/model.UserStatusReq'
        description: action is UserStatusAction
    type: object
  model.ComputedFavoriteGenres:
    properties:
      count:
        type: string
      genre:
        type: string
      percent:
        type: number
      userId:
        type: integer
    type: object
  model.DeviceInfo:
    properties:
      appName:
        type: string
      appVersion:
        description: 'format: ^\d\d?\.\d\d?\.\d\d?$'
        type: string
      deviceModel:
        type: string
      fingerprint:
        type: string
      notifToken:
        type: string
      os:
        type: string
    required:
    - appName
    - appVersion
    - deviceModel
    - os
    type: object
  model.DownloadLinksSettings:
    properties:
      includeCensored:
        default: true
        type: boolean
      includeDubbed:
        default: true
        type: boolean
      includeHardSub:
        default: true
        type: boolean
      preferredQualities:
        description: 'enum: 480p,720p,1080p,2160p'
        items:
          type: string
        type: array
    type: object
  model.EditProfileReq:
    properties:
      bio:
        type: string
      email:
        type: string
      mbtiType:
        $ref: '#/definitions/model.MbtiType'
      publicName:
        type: string
      username:
        description: 'format: (?i)^[a-z|\d_-]+$'
        type: string
    type: object
  model.FollowListProfileImageDataModel:
    properties:
      blurHash:
        type: string
      size:
        type: integer
      thumbnail:
        type: string
      url:
        type: string
    type: object
  model.FollowUserDataModel:
    properties:
      bio:
        type: string
      profileImages:
        items:
          $ref: '#/definitions/model.FollowListProfileImageDataModel'
        type: array
      publicName:
        type: string
      rawUsername:
        type: string
      userId:
        type: integer
      username:
        type: string
    type: object
  model.GetSingleChatListReq:
    properties:
      chatsLimit:
        minimum: 1
        type: integer
      chatsSkip:
        minimum: 0
        type: integer
      includeProfileImages:
        default: false
        type: boolean
      messagePerChatLimit:
        maximum: 6
        minimum: 1
        type: integer
      messagePerChatSkip:
        minimum: 0
        type: integer
      messageState:
        default: 0
        description: '0: pending, 1: saved, 2: receiver read'
        maximum: 2
        minimum: 0
        type: integer
    type: object
  model.GetSingleMessagesReq:
    properties:
      date:
        type: string
      limit:
        minimum: 1
        type: integer
      messageState:
        default: 0
        description: '0: pending, 1: saved, 2: receiver read || on 0 value, this filter
          won''t apply'
        maximum: 2
        minimum: 0
        type: integer
      receiverId:
        minimum: 1
        type: integer
      reverseOrder:
        default: false
        type: boolean
      skip:
        minimum: 0
        type: integer
    type: object
  model.LoginViewModel:
    properties:
      deviceInfo:
        $ref: '#/definitions/model.DeviceInfo'
      password:
        description: contain one number, one uppercase letter, cannot have space,
          cannot be equal with username
        type: string
      username_email:
        type: string
    type: object
  model.MbtiType:
    enum:
    - ISTJ
    - ISFJ
    - INFJ
    - INTJ
    - ISTP
    - ISFP
    - INFP
    - INTP
    - ESTP
    - ESFP
    - ENFP
    - ENTP
    - ESTJ
    - ESFJ
    - ENFJ
    - ENTJ
    type: string
    x-enum-varnames:
    - ISTJ
    - ISFJ
    - INFJ
    - INTJ
    - ISTP
    - ISFP
    - INFP
    - INTP
    - ESTP
    - ESFP
    - ENFP
    - ENTP
    - ESTJ
    - ESFJ
    - ENFJ
    - ENTJ
  model.MediaFile:
    properties:
      blurHash:
        type: string
      date:
        type: string
      id:
        type: integer
      messageId:
        type: integer
      size:
        type: integer
      thumbnail:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  model.MessageDataModel:
    properties:
      content:
        type: string
      creatorId:
        type: integer
      date:
        type: string
      id:
        type: integer
      medias:
        items:
          $ref: '#/definitions/model.MediaFile'
        type: array
      receiverId:
        type: integer
      roomId:
        type: integer
      state:
        type: integer
    type: object
  model.MessageRead:
    properties:
      date:
        type: string
      id:
        minimum: 1
        type: integer
      roomId:
        description: value -1 means its user-to-user message
        minimum: -1
        type: integer
      state:
        description: '0: pending, 1: saved, 2: receiver read'
        maximum: 2
        minimum: 0
        type: integer
      userId:
        minimum: 1
        type: integer
    type: object
  model.MovieSettings:
    properties:
      includeAnime:
        default: true
        type: boolean
      includeHentai:
        default: false
        type: boolean
    type: object
  model.NewMessage:
    properties:
      content:
        type: string
      receiverId:
        minimum: 1
        type: integer
      roomId:
        description: value -1 means its user-to-user message
        minimum: -1
        type: integer
      uuid:
        type: string
    type: object
  model.NewMessageSendResult:
    properties:
      code:
        type: integer
      date:
        type: string
      errorMessage:
        type: string
      id:
        type: integer
      receiverId:
        type: integer
      roomId:
        type: integer
      state:
        type: integer
      uuid:
        type: string
    type: object
  model.NotificationDataModel:
    properties:
      creatorId:
        type: integer
      creatorImage:
        type: string
      date:
        type: string
      entityId:
        type: string
      entityTypeId:
        type: integer
      id:
        type: integer
      message:
        type: string
      receiverId:
        type: integer
      status:
        description: '1: saved, 2: seen'
        type: integer
      subEntityTypeId:
        $ref: '#/definitions/model.SubEntityTypeId'
    type: object
  model.NotificationSettings:
    properties:
      finishedListSpinOffSequel:
        default: true
        type: boolean
      followMovie:
        default: true
        type: boolean
      followMovieBetterQuality:
        default: false
        type: boolean
      followMovieSubtitle:
        default: false
        type: boolean
      futureList:
        default: false
        type: boolean
      futureListSerialSeasonEnd:
        default: true
        type: boolean
      futureListSubtitle:
        default: false
        type: boolean
      newFollower:
        default: true
        type: boolean
      newMessage:
        default: false
        type: boolean
    type: object
  model.Permission:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  model.ProfileImage:
    properties:
      addDate:
        type: string
      blurHash:
        type: string
      originalSize:
        type: integer
      size:
        type: integer
      thumbnail:
        type: string
      url:
        type: string
      userId:
        type: integer
    type: object
  model.ProfileImageDataModel:
    properties:
      addDate:
        type: string
      blurHash:
        type: string
      size:
        type: integer
      thumbnail:
        type: string
      url:
        type: string
      userId:
        type: integer
    type: object
  model.ReceiveNewMessage:
    properties:
      content:
        type: string
      creatorImage:
        type: string
      date:
        type: string
      id:
        type: integer
      medias:
        items:
          $ref: '#/definitions/model.MediaFile'
        type: array
      receiverId:
        type: integer
      roomId:
        type: integer
      state:
        type: integer
      userId:
        type: integer
      username:
        type: string
      uuid:
        type: string
    type: object
  model.RegisterViewModel:
    properties:
      confirmPassword:
        type: string
      deviceInfo:
        $ref: '#/definitions/model.DeviceInfo'
      email:
        type: string
      password:
        description: contain one number, one uppercase letter, cannot have space,
          cannot be equal with username
        type: string
      username:
        description: 'min:6, max: 50'
        format: (?i)^[a-z|\d_-]+$
        type: string
    type: object
  model.Role:
    properties:
      botsNotification:
        type: boolean
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/model.RoleToPermission'
        type: array
      torrentLeachLimitGb:
        type: integer
      torrentSearchLimit:
        type: integer
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/model.UserToRole'
        type: array
    type: object
  model.RoleToPermission:
    properties:
      permissionId:
        type: integer
      roleId:
        type: integer
    type: object
  model.RoleWithPermissions:
    properties:
      botsNotification:
        type: boolean
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/model.Permission'
        type: array
      torrentLeachLimitGb:
        type: integer
      torrentSearchLimit:
        type: integer
      updatedAt:
        type: string
    type: object
  model.ServerResultMessage:
    properties:
      action:
        $ref: '#/definitions/model.ActionType'
      actionError:
        allOf:
        - $ref: '#/definitions/model.ActionError'
        description: action is ErrorAction
      chatMessages:
        description: action is SingleChatMessagesAction
        items:
          $ref: '#/definitions/model.MessageDataModel'
        type: array
      chats:
        description: action is SingleChatsListAction
        items:
          $ref: '#/definitions/model.ChatsCompressedDataModel'
        type: array
      editProfile:
        allOf:
        - $ref: '#/definitions/model.EditProfileReq'
        description: action is UpdateProfileAction
      messageRead:
        allOf:
        - $ref: '#/definitions/model.MessageRead'
        description: action is ReceiveMessageStateAction
      newMessageSendResult:
        allOf:
        - $ref: '#/definitions/model.NewMessageSendResult'
        description: action is NewMessageSendResultAction
      notificationSettings:
        allOf:
        - $ref: '#/definitions/model.NotificationSettings'
        description: action is NotificationSettingsAction
      profileImages:
        description: action is UpdateProfileImagesAction
        items:
          $ref: '#/definitions/model.ProfileImageDataModel'
        type: array
      receiveNewMessage:
        allOf:
        - $ref: '#/definitions/model.ReceiveNewMessage'
        description: action is ReceiveNewMessageAction
      userStatusRes:
        allOf:
        - $ref: '#/definitions/model.UserStatusRes'
        description: action is UserStatusAction
    type: object
  model.Status:
    properties:
      tasks:
        $ref: '#/definitions/model.Tasks'
    type: object
  model.SubEntityTypeId:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    type: integer
    x-enum-varnames:
    - FinishedListSpinOffSequel
    - FollowingMovie
    - FollowMovieBetterQuality
    - FollowMovieSubtitle
    - FutureList
    - FutureListSerialSeasonEnd
    - FutureListSubtitle
  model.TaskInfo:
    properties:
      consumerCount:
        type: integer
      links:
        items:
          type: string
        type: array
      runningCount:
        type: integer
    type: object
  model.Tasks:
    properties:
      blurHash:
        $ref: '#/definitions/model.TaskInfo'
      mediaService:
        $ref: '#/definitions/model.TaskInfo'
      notification:
        $ref: '#/definitions/model.TaskInfo'
      pushNotification:
        $ref: '#/definitions/model.TaskInfo'
      telegramMessage:
        $ref: '#/definitions/model.TaskInfo'
    type: object
  model.TokenViewModel:
    properties:
      accessToken:
        type: string
      accessToken_expire:
        type: integer
      refreshToken:
        type: string
    type: object
  model.UpdatePasswordReq:
    properties:
      newPassword:
        description: contain one number, one uppercase letter, cannot have space,
          cannot be equal with oldPassword
        type: string
      oldPassword:
        type: string
    required:
    - oldPassword
    type: object
  model.UploadMediaReq:
    properties:
      content:
        type: string
      receiverId:
        minimum: 1
        type: integer
      roomId:
        description: value -1 means its user-to-user message
        minimum: -1
        type: integer
      uuid:
        type: string
    type: object
  model.UserProfileRes:
    properties:
      MovieSettings:
        $ref: '#/definitions/model.MovieSettings'
      RolesWithPermissions:
        items:
          $ref: '#/definitions/model.RoleWithPermissions'
        type: array
      bio:
        type: string
      computedFavoriteGenres:
        items:
          $ref: '#/definitions/model.ComputedFavoriteGenres'
        type: array
      computedStatsLastUpdate:
        type: integer
      defaultProfile:
        type: string
      downloadLinksSettings:
        $ref: '#/definitions/model.DownloadLinksSettings'
      email:
        type: string
      emailVerified:
        type: boolean
      favoriteGenres:
        items:
          type: string
        type: array
      followersCount:
        type: integer
      followingsCount:
        type: integer
      lastSeenDate:
        type: string
      mbtiType:
        $ref: '#/definitions/model.MbtiType'
      notificationSettings:
        $ref: '#/definitions/model.NotificationSettings'
      profileImages:
        items:
          $ref: '#/definitions/model.FollowListProfileImageDataModel'
        type: array
      publicName:
        type: string
      rawUsername:
        type: string
      registrationDate:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      thisDevice:
        $ref: '#/definitions/model.ActiveSessionDataModel'
      userId:
        type: integer
      userTorrent:
        $ref: '#/definitions/model.UserTorrent'
      username:
        type: string
    type: object
  model.UserRolePermissionRes:
    properties:
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      rolesWithPermissions:
        items:
          $ref: '#/definitions/model.RoleWithPermissions'
        type: array
    type: object
  model.UserSettingsRes:
    properties:
      downloadLinksSettings:
        $ref: '#/definitions/model.DownloadLinksSettings'
      movieSettings:
        $ref: '#/definitions/model.MovieSettings'
      notificationSettings:
        $ref: '#/definitions/model.NotificationSettings'
    type: object
  model.UserStatusReq:
    properties:
      type:
        $ref: '#/definitions/model.UserStatusResultType'
      userIds:
        items:
          maximum: 12
          type: integer
        type: array
    type: object
  model.UserStatusRes:
    properties:
      isTypingUserIds:
        items:
          type: integer
        type: array
      onlineUserIds:
        items:
          type: integer
        type: array
      type:
        $ref: '#/definitions/model.UserStatusResultType'
    type: object
  model.UserStatusResultType:
    enum:
    - onlineUsers
    - isTyping
    - stopTyping
    type: string
    x-enum-varnames:
    - UserStatusOnlineUsers
    - UserStatusIsTyping
    - UserStatusStopTyping
  model.UserToRole:
    properties:
      roleId:
        type: integer
      userId:
        type: integer
    type: object
  model.UserTorrent:
    properties:
      firstUseAt:
        type: string
      torrentLeachGb:
        type: number
      torrentSearch:
        type: integer
    type: object
  model.UserViewModel:
    properties:
      email:
        type: string
      profileImages:
        items:
          $ref: '#/definitions/model.ProfileImage'
        type: array
      roleIds:
        items:
          type: integer
        type: array
      roleNames:
        items:
          type: string
        type: array
      token:
        $ref: '#/definitions/model.TokenViewModel'
      userId:
        type: integer
      username:
        type: string
    type: object
  response.ResponseErrorModel:
    properties:
      code:
        type: integer
      errorMessage: {}
    type: object
  response.ResponseOKModel:
    properties:
      code:
        type: integer
      errorMessage:
        type: string
    type: object
host: chat.movieTracker.site
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Chat service of the downloader_api project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Chat Server
  version: "2.0"
paths:
  /:
    get:
      description: get the status of server.
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - System
  /v1/admin/status:
    get:
      description: Return status of server resources and services
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Server Status
      tags:
      - Admin-Status
  /v1/user/UpdateUserFavoriteGenres/:genres:
    put:
      description: maximum number of genres is 6, (error code 409).
      parameters:
      - description: 'Array of String joined by ''-'', Example: action-sci_fi-drama'
        in: path
        name: genres
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Update Favorite Genres
      tags:
      - User
  /v1/user/activeSessions:
    get:
      description: Return users current session and other active sections.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ActiveSessionRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Active Sessions
      tags:
      - User-Auth
  /v1/user/deleteAccount:
    delete:
      description: |-
        remove user account. email the user with a link, if user open it, account gets removed.
        the link expires in 10 minutes.
        maybe email goes to spam folder.
        limited to 2 call per minute
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Delete Account
      tags:
      - User
  /v1/user/deleteAccount/:userId/:token:
    get:
      description: |-
        remove account link created on server and send to user by email, if user click this link the account will start to remove.
        limited to 2 call per minute
      parameters:
      - description: userId
        in: path
        name: userId
        required: true
        type: integer
      - description: delete account verify token
        in: path
        name: token
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Delete Account (Internal Usage)
      tags:
      - User
  /v1/user/editUserProfile:
    post:
      description: Edit profile data.
      parameters:
      - description: update fields
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.EditProfileReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Edit Profile
      tags:
      - User
  /v1/user/follow/:followId:
    post:
      description: Add followId user to your following list
      parameters:
      - description: id on the user want to follow
        in: path
        name: followId
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Follow User
      tags:
      - User-Follow
  /v1/user/followers/:userId/:skip/:limit:
    get:
      description: get user followers
      parameters:
      - description: id of user
        in: path
        name: userId
        required: true
        type: integer
      - description: skip
        in: path
        name: skip
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FollowUserDataModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Followers
      tags:
      - User-Follow
  /v1/user/followings/:userId/:skip/:limit:
    get:
      description: get user followings
      parameters:
      - description: id of user
        in: path
        name: userId
        required: true
        type: integer
      - description: skip
        in: path
        name: skip
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FollowUserDataModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Followings
      tags:
      - User-Follow
  /v1/user/forceLogout/:deviceId:
    put:
      description: Logout selected device
      parameters:
      - description: unique id of the device
        in: path
        name: deviceId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Force Logout
      tags:
      - User-Auth
  /v1/user/forceLogoutAll:
    put:
      description: force logout all session except current session
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Force Logout All
      tags:
      - User-Auth
  /v1/user/getToken:
    put:
      description: Get new Tokens, also return `refreshToken`
      parameters:
      - description: return refreshToken in response body instead of saving in cookie
        in: query
        name: noCookie
        type: boolean
      - description: also return profile images, slower response
        in: query
        name: profileImages
        type: boolean
      - description: Device Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.DeviceInfo'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Get Token
      tags:
      - User-Auth
  /v1/user/login:
    post:
      description: Login with provided credentials
      parameters:
      - description: return refreshToken in response body instead of saving in cookie
        in: query
        name: noCookie
        required: true
        type: boolean
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.LoginViewModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Login user
      tags:
      - User-Auth
  /v1/user/logout:
    put:
      description: |-
        Logout user, return accessToken as empty string and also reset/remove refreshToken cookie if use in browser
        in other environments reset refreshToken from client after successful logout.
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - User-Auth
  /v1/user/media/upload:
    post:
      description: upload and share media files in chats
      parameters:
      - description: upload file data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UploadMediaReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MediaFile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Upload File
      tags:
      - User-Chat
  /v1/user/notifications/:skip/:limit:
    get:
      description: get user followers/followings events
      parameters:
      - description: skip
        in: path
        name: skip
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      - description: entityTypeId, ignore filter when value is 0
        in: query
        name: entityTypeId
        required: true
        type: integer
      - description: status, ignore filter when value is 0, 1 means saved, 2 means
          seen
        in: query
        name: status
        required: true
        type: integer
      - description: autoUpdateStatus
        in: query
        name: autoUpdateStatus
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NotificationDataModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Follow events
      tags:
      - User-Notifications
  /v1/user/notifications/batchUpdateStatus/:id/:entityTypeId/:status:
    put:
      description: update the status of notifications
      parameters:
      - description: notificationId
        in: path
        name: id
        required: true
        type: integer
      - description: type of notification, ignore filter when value is 0
        in: path
        name: entityTypeId
        required: true
        type: integer
      - description: new value of status, 1 means saved, 2 means seen
        in: path
        name: status
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Notification Status update
      tags:
      - User-Notifications
  /v1/user/profile:
    get:
      description: Return users profile data. if dont provide userId, return current
        user profile
      parameters:
      - description: userId
        in: query
        name: userId
        type: integer
      - description: loadSettings
        in: query
        name: loadSettings
        type: boolean
      - description: loadFollowersCount
        in: query
        name: loadFollowersCount
        type: boolean
      - description: loadDevice
        in: query
        name: loadDevice
        type: boolean
      - description: loadProfileImages
        in: query
        name: loadProfileImages
        type: boolean
      - description: loadComputedFavoriteGenres
        in: query
        name: loadComputedFavoriteGenres
        type: boolean
      - description: loadRoles
        in: query
        name: loadRoles
        type: boolean
      - description: loadRolesWithPermissions
        in: query
        name: loadRolesWithPermissions
        type: boolean
      - description: loadTorrentUsage
        in: query
        name: loadTorrentUsage
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserProfileRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Profile Data
      tags:
      - User
  /v1/user/removeProfileImage/:fileName:
    delete:
      description: Returns new profileImages array
      parameters:
      - description: file name of profile image
        in: path
        name: fileName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ProfileImageDataModel'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Remove Profile Image
      tags:
      - User
  /v1/user/roles_and_permissions:
    get:
      description: Return role and permission of user
      parameters:
      - description: userId
        in: query
        name: userId
        type: integer
      - description: loadRoles
        in: query
        name: loadRoles
        type: boolean
      - description: loadRolesWithPermissions
        in: query
        name: loadRolesWithPermissions
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserRolePermissionRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Role Data
      tags:
      - User
  /v1/user/sendVerifyEmail:
    get:
      description: |-
        send an email with an activation link. the link will expire after 6 hour.
        maybe email goes to spam folder.
        limited to 2 call per minute
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Send Verify Email
      tags:
      - User
  /v1/user/setNotifToken:
    put:
      description: send device token as Notification token
      parameters:
      - description: notifToken
        in: path
        name: notifToken
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Notification Token
      tags:
      - User-Notifications
  /v1/user/signup:
    post:
      description: |-
        Register a new user with the provided credentials
        Device detection can be improved on client side with adding 'deviceInfo.fingerprint'
      parameters:
      - description: return refreshToken in response body instead of saving in cookie
        in: query
        name: noCookie
        required: true
        type: boolean
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.RegisterViewModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Register a new user
      tags:
      - User-Auth
  /v1/user/unfollow/:followId:
    delete:
      description: Remove followId user from users following list
      parameters:
      - description: id on the user want to unfollow
        in: path
        name: followId
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: UnFollow User
      tags:
      - User-Follow
  /v1/user/updatePassword:
    put:
      description: Update User Password.
      parameters:
      - description: old/new passwords
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/model.UpdatePasswordReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Update Password
      tags:
      - User
  /v1/user/updateUserSettings/:settingName:
    put:
      description: Change user settings based on settingName.
      parameters:
      - description: name of setting
        enum:
        - all
        - downloadLinks
        - notification
        - movie
        in: path
        name: settingName
        required: true
        type: string
      - description: new setting values
        in: body
        name: downloadLinksSettings
        schema:
          $ref: '#/definitions/model.DownloadLinksSettings'
      - description: new setting values
        in: body
        name: notificationSettings
        schema:
          $ref: '#/definitions/model.NotificationSettings'
      - description: new setting values
        in: body
        name: movieSettings
        schema:
          $ref: '#/definitions/model.MovieSettings'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Change user settings based on settingName.
      tags:
      - User-Setting
  /v1/user/uploadProfileImage:
    post:
      description: send image as formData with key 'profileImage' and don't forget
        to set contentType. returns new profileImages array .
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ProfileImageDataModel'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Upload Profile Image
      tags:
      - User
  /v1/user/userSettings/:settingName:
    get:
      description: Returns user settings for movies, downloadLinks and notifications.
      parameters:
      - description: name of setting
        enum:
        - all
        - downloadLinks
        - notification
        - movie
        in: path
        name: settingName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserSettingsRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Get User Settings
      tags:
      - User-Setting
  /v1/user/verifyEmail/:userId/:token:
    get:
      description: |-
        verify given email token. create activation link on server side.
        limited to 2 call per minute
      parameters:
      - description: userId
        in: path
        name: userId
        required: true
        type: integer
      - description: email verify token
        in: path
        name: token
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseOKModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Verify Email (Internal Usage)
      tags:
      - User
  /v1/ws/addClient/:deviceId:
    get:
      description: start websocket connection
      parameters:
      - description: unique id of the device
        in: path
        name: deviceId
        required: true
        type: string
      - description: types of bodies can be handled in server
        in: body
        name: messageBody
        required: true
        schema:
          $ref: '#/definitions/model.ClientMessage'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ServerResultMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Connect websocket
      tags:
      - User-Websocket
  /v1/ws/singleChat/list:
    get:
      description: get list of conversations
      parameters:
      - description: chatsSkip
        in: query
        name: chatsSkip
        type: integer
      - description: chatsLimit
        in: query
        name: chatsLimit
        type: integer
      - description: messagePerChatSkip
        in: query
        name: messagePerChatSkip
        type: integer
      - description: messagePerChatLimit
        in: query
        name: messagePerChatLimit
        type: integer
      - description: messageState
        in: query
        name: messageState
        type: integer
      - description: includeProfileImages
        in: query
        name: includeProfileImages
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ChatsCompressedDataModel'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Chats List
      tags:
      - User-Websocket
  /v1/ws/singleChat/messages:
    get:
      description: get messages of users chat
      parameters:
      - description: receiverId
        in: query
        name: receiverId
        type: integer
      - description: skip
        in: query
        name: skip
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: messageState
        in: query
        name: messageState
        type: integer
      - description: reverseOrder
        in: query
        name: reverseOrder
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MessageDataModel'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Chat Messages
      tags:
      - User-Websocket
schemes:
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
