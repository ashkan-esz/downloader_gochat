basePath: /
definitions:
  model.DeviceInfo:
    properties:
      appName:
        type: string
      appVersion:
        type: string
      deviceModel:
        type: string
      fingerprint:
        type: string
      os:
        type: string
    type: object
  model.LoginViewModel:
    properties:
      deviceInfo:
        $ref: '#/definitions/model.DeviceInfo'
      password:
        type: string
      username_email:
        type: string
    type: object
  model.ProfileImage:
    properties:
      addDate:
        type: string
      originalSize:
        type: integer
      size:
        type: integer
      thumbnail:
        type: string
      url:
        type: string
      userId:
        type: integer
    type: object
  model.RegisterViewModel:
    properties:
      confirmPassword:
        type: string
      deviceInfo:
        $ref: '#/definitions/model.DeviceInfo'
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.TokenViewModel:
    properties:
      accessToken:
        type: string
      accessToken_expire:
        type: integer
      refreshToken:
        type: string
    type: object
  model.UserViewModel:
    properties:
      email:
        type: string
      profileImages:
        items:
          $ref: '#/definitions/model.ProfileImage'
        type: array
      token:
        $ref: '#/definitions/model.TokenViewModel'
      userId:
        type: integer
      username:
        type: string
    type: object
  response.ResponseErrorModel:
    properties:
      code:
        type: integer
      errorMessage: {}
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Swagger Example API
  version: "2.0"
paths:
  /:
    get:
      description: get the status of server.
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - root
  /v1/user/getToken:
    put:
      description: Get new Tokens, also return `refreshToken`
      parameters:
      - description: return refreshToken in response body instead of saving in cookie
        in: query
        name: noCookie
        required: true
        type: boolean
      - description: also return profile images, slower response
        in: query
        name: profileImages
        required: true
        type: boolean
      - description: Device Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.DeviceInfo'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Get Token
      tags:
      - User
  /v1/user/login:
    post:
      description: Login with provided credentials
      parameters:
      - description: return refreshToken in response body instead of saving in cookie
        in: query
        name: noCookie
        required: true
        type: boolean
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.LoginViewModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Login user
      tags:
      - User
  /v1/user/logout:
    get:
      description: Logout the currently logged in user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - User
  /v1/user/signup:
    post:
      description: |-
        Register a new user with the provided credentials
        Unlike the main server, this one doesn't handle ip detection and ip location
        Also detect multiple login on same device as new device login, can be handled on client side with adding 'deviceInfo.fingerprint'
        Also doesn't handle and send emails
      parameters:
      - description: return refreshToken in response body instead of saving in cookie
        in: query
        name: noCookie
        required: true
        type: boolean
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.RegisterViewModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserViewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseErrorModel'
      summary: Register a new user
      tags:
      - User
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
